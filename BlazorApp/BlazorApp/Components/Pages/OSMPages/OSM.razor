@page "/map"

@using System.Text.Json
@using System.Text.Json.Serialization
@implements IAsyncDisposable
@inject IJSRuntime Js

<h3>Interactive map</h3>
<div id="map" style="width: 800px; height: 600px;"></div>

@code {
    private IJSObjectReference? _module;
    private readonly List<GeoJsonObject> _sessionShapes = [];
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _module = await Js.InvokeAsync<IJSObjectReference>("import", "./leafletmap.js");
            await _module.InvokeAsync<string>("initialize_map");
        }
    }

    [JSInvokable]
    public Task ShapeCreated(string geoJson)
    {
        _sessionShapes.Add(JsonSerializer.Deserialize<GeoJsonObject>(geoJson)!);
        Console.WriteLine("Created: " + geoJson);
        return Task.CompletedTask;
    }
    
    [JSInvokable]
    public Task ShapeEdited(string geoJson) 
    {
        var edited = JsonSerializer.Deserialize<GeoJsonObject>(geoJson)!;
        // find & replace in sessionShapes by some ID if you embed one,
        // or simply update by geometry match for now:
        var idx = _sessionShapes.FindIndex(s => s.Id == edited.Id);
        if (idx >= 0) _sessionShapes[idx] = edited;
        return Task.CompletedTask;
    }
    
    [JSInvokable]
    public Task ShapeDeleted(string geoJson) 
    {
        var deleted = JsonSerializer.Deserialize<GeoJsonObject>(geoJson)!;
        _sessionShapes.RemoveAll(s => s.Id == deleted.Id);
        return Task.CompletedTask;
    }
    
    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (_module is not null)
        {
            try
            {
                await _module.DisposeAsync();
            }
            catch (JSDisconnectedException)
            {
            }
        }
    }
    
    // Simple GeoJSON wrapper
    public record GeoJsonObject(string Type, Dictionary<string, object>? Properties, GeometryObject Geometry) 
    {
        [JsonIgnore]
        public string Id => Properties?["_leaflet_id"].ToString() ?? Guid.NewGuid().ToString();
    }
    
    public record GeometryObject(string Type, double[][][] Coordinates);
}

